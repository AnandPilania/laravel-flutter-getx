import 'dart:convert';

import 'package:get/get.dart';
import 'package:get/get_connect/http/src/request/request.dart';
import 'package:{{APP_NAME}}/config/constants.dart';
import 'package:{{APP_NAME}}/core/mock_base.dart';
import 'package:{{APP_NAME}}/core/model_base.dart';
import 'package:{{APP_NAME}}/app/exceptions/bad_request_exception.dart';
import 'package:{{APP_NAME}}/app/exceptions/unauthorised_exception.dart';
import 'package:{{APP_NAME}}/app/exceptions/fetch_data_exception.dart';
import 'package:{{APP_NAME}}/app/services/app_service.dart';

abstract class ProviderBase extends GetConnect {
  AppService? appService;

  @override
  void onInit() async {
    appService = Get.find<AppService>();

    httpClient.baseUrl = api;

    if (appService!.config!.isApiProtected != null &&
        appService!.config!.apiProtectionHeaders != null) {
      if (appService!.user != null) {
        httpClient.addAuthenticator((Request request) {
          request.headers['Authorization'] = "Bearer $appService.user.token";
          return request;
        });
      }

      httpClient.addRequestModifier((Request request) {
        request.headers['apikey'] = '12345678';
        return request;
      });
    }
  }

  dynamic response(Response r) {
    switch (r.statusCode) {
      case 200:
        var responseJson = json.decode(r.body.toString());
        return responseJson;
      case 400:
        throw BadRequestException(r.body.toString());
      case 401:
      case 403:
        throw UnauthorisedException(r.body.toString());
      case 500:
      default:
        throw FetchDataException(
            'Error occured while Communication with Server with StatusCode : ${r.statusCode}');
    }
  }

  Future<ModelBase> getMockData(MockBase mock, data) {
    return Future.delayed(MOCK_DELAY.seconds, () {
      return mock.result(data);
    });
  }
}
