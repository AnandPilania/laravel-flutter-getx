import 'dart:convert';

import 'package:get/get.dart';
import 'package:{{APP_NAME}}/config/constants.dart';
import 'package:{{APP_NAME}}/app/exceptions/bad_request_exception.dart';
import 'package:{{APP_NAME}}/app/exceptions/unauthorised_exception.dart';
import 'package:{{APP_NAME}}/app/exceptions/fetch_data_exception.dart';
import 'package:{{APP_NAME}}/app/models/config.dart';

abstract class ProviderBase extends GetConnect {
  AppService _appService = Get.find();

  @override
  void onInit() async {
    httpClient.baseUrl = api;
    await _setHeaders();
  }

  dynamic response(Response r) {
    switch (r.statusCode) {
      case 200:
        var responseJson = json.decode(r.body.toString());
        return responseJson;
      case 400:
        throw BadRequestException(r.body.toString());
      case 401:
      case 403:
        throw UnauthorisedException(r.body.toString());
      case 500:
      default:
        throw FetchDataException(
            'Error occured while Communication with Server with StatusCode : ${r.statusCode}');
    }
  }

  Future<void> _setHeaders() {
    if(_appService.config.isApiProtected != null && _appService.config.apiProtectionHeaders != null) {
      List<String, dynamic> headers = {};

      if(appService.user) {
        headers.add('Authorization', 'Bearer ');
      }

      httpClient.headers = {};
    }
  }
}
